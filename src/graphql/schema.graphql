schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Coords @aws_cognito_user_pools @aws_iam {
  lat: Float!
  long: Float!
}

type CreateAttendanceOutput {
  data: UserPlaceConnection
  statusCode: Int!
}

type CreateEventOutput_c {
  data: Event
  statusCode: Int
}

type Event @aws_cognito_user_pools @aws_iam {
  beginningTime: AWSDateTime!
  chat(createdAt: ModelStringKeyConditionInput, filter: ModelEventChatMessageFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelEventChatMessageConnection
  createdAt: AWSDateTime!
  creator: Uprofile!
  creatorID: ID!
  description: String!
  endingTime: AWSDateTime!
  eventPictures: [AWSURL]
  eventVideos: [AWSURL]
  id: ID!
  name: String!
  participants(filter: ModelUserEventConnectionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserEventConnectionConnection
  place: Place
  placeID: ID!
  privacy: EventPrivacy!
  profilePic: AWSURL
  tags: [String]
  updatedAt: AWSDateTime!
}

type EventChatMessage @aws_api_key @aws_cognito_user_pools {
  body: String!
  createdAt: AWSDateTime
  event: Event
  eventID: ID!
  id: ID!
  profileID: ID!
  updatedAt: AWSDateTime!
  userProfile: Uprofile
}

type FollowUserOutput {
  data: UserConnection
  statusCode: Int!
}

type ModelEventChatMessageConnection {
  items: [EventChatMessage]
  nextToken: String
}

type ModelEventConnection {
  items: [Event]
  nextToken: String
}

type ModelNotificationConnection {
  items: [Notification]
  nextToken: String
}

type ModelPlaceConnection {
  items: [Place]
  nextToken: String
}

type ModelPrivateNoteConnection {
  items: [PrivateNote]
  nextToken: String
}

type ModelTaskConnection {
  items: [Task]
  nextToken: String
}

type ModelUprofileConnection {
  items: [Uprofile]
  nextToken: String
}

type ModelUserConnectionConnection @aws_cognito_user_pools @aws_iam {
  items: [UserConnection]
  nextToken: String
}

type ModelUserDocConnection {
  items: [UserDoc]
  nextToken: String
}

type ModelUserEventConnectionConnection @aws_cognito_user_pools @aws_iam {
  items: [UserEventConnection]
  nextToken: String
}

type ModelUserPlaceConnectionConnection {
  items: [UserPlaceConnection]
  nextToken: String
}

type Mutation @aws_cognito_user_pools @aws_iam {
  createAttendance(condition: ModelUserPlaceConnectionConditionInput, input: CreateUserPlaceConnectionInput!): CreateAttendanceOutput
  createEvent(condition: ModelEventConditionInput, input: CreateEventInput!): Event
  createEventChatMessage(condition: ModelEventChatMessageConditionInput, input: CreateEventChatMessageInput!): EventChatMessage
  createEvent_c(condition: ModelEventConditionInput, input: CreateEventInput_c!): CreateEventOutput_c
  createNotification(condition: ModelNotificationConditionInput, input: CreateNotificationInput!): Notification
  createPlace(condition: ModelPlaceConditionInput, input: CreatePlaceInput!): Place
  createPrivateNote(condition: ModelPrivateNoteConditionInput, input: CreatePrivateNoteInput!): PrivateNote
  createTask(condition: ModelTaskConditionInput, input: CreateTaskInput!): Task
  createUprofile(condition: ModelUprofileConditionInput, input: CreateUprofileInput!): Uprofile
  createUserConnection(condition: ModelUserConnectionConditionInput, input: CreateUserConnectionInput!): UserConnection
  createUserDoc(condition: ModelUserDocConditionInput, input: CreateUserDocInput!): UserDoc
  createUserEventConnection(condition: ModelUserEventConnectionConditionInput, input: CreateUserEventConnectionInput!): UserEventConnection
  createUserPlaceConnection(condition: ModelUserPlaceConnectionConditionInput, input: CreateUserPlaceConnectionInput!): UserPlaceConnection
  deleteEvent(condition: ModelEventConditionInput, input: DeleteEventInput!): Event
  deleteEventChatMessage(condition: ModelEventChatMessageConditionInput, input: DeleteEventChatMessageInput!): EventChatMessage
  deleteNotification(condition: ModelNotificationConditionInput, input: DeleteNotificationInput!): Notification
  deletePlace(condition: ModelPlaceConditionInput, input: DeletePlaceInput!): Place
  deletePrivateNote(condition: ModelPrivateNoteConditionInput, input: DeletePrivateNoteInput!): PrivateNote
  deleteTask(condition: ModelTaskConditionInput, input: DeleteTaskInput!): Task
  deleteUprofile(condition: ModelUprofileConditionInput, input: DeleteUprofileInput!): Uprofile
  deleteUserConnection(condition: ModelUserConnectionConditionInput, input: DeleteUserConnectionInput!): UserConnection
  deleteUserDoc(condition: ModelUserDocConditionInput, input: DeleteUserDocInput!): UserDoc
  deleteUserEventConnection(condition: ModelUserEventConnectionConditionInput, input: DeleteUserEventConnectionInput!): UserEventConnection
  deleteUserPlaceConnection(condition: ModelUserPlaceConnectionConditionInput, input: DeleteUserPlaceConnectionInput!): UserPlaceConnection
  followUser(condition: ModelUserConnectionConditionInput, input: CreateUserConnectionInput!): FollowUserOutput
  updateCurrentPlace(condition: ModelUprofileConditionInput, input: UpdateUprofileInput!): UpdateCurrentPlaceOutput
  updateEvent(condition: ModelEventConditionInput, input: UpdateEventInput!): Event
  updateEventChatMessage(condition: ModelEventChatMessageConditionInput, input: UpdateEventChatMessageInput!): EventChatMessage
  updateNotification(condition: ModelNotificationConditionInput, input: UpdateNotificationInput!): Notification
  updatePlace(condition: ModelPlaceConditionInput, input: UpdatePlaceInput!): Place
  updatePrivateNote(condition: ModelPrivateNoteConditionInput, input: UpdatePrivateNoteInput!): PrivateNote
  updateTask(condition: ModelTaskConditionInput, input: UpdateTaskInput!): Task
  updateUprofile(condition: ModelUprofileConditionInput, input: UpdateUprofileInput!): Uprofile
  updateUserConnection(condition: ModelUserConnectionConditionInput, input: UpdateUserConnectionInput!): UserConnection
  updateUserDoc(condition: ModelUserDocConditionInput, input: UpdateUserDocInput!): UserDoc
  updateUserEventConnection(condition: ModelUserEventConnectionConditionInput, input: UpdateUserEventConnectionInput!): UserEventConnection
  updateUserPlaceConnection(condition: ModelUserPlaceConnectionConditionInput, input: UpdateUserPlaceConnectionInput!): UserPlaceConnection
}

type Notification @aws_cognito_user_pools @aws_iam {
  body: String!
  createdAt: AWSDateTime
  id: ID!
  photo: AWSURL
  profileID: ID!
  type: NotifType!
  uProfile: Uprofile
  updatedAt: AWSDateTime!
}

type Place @aws_cognito_user_pools @aws_iam {
  address: String!
  attendings(arrivingTime: ModelStringKeyConditionInput, filter: ModelUserPlaceConnectionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserPlaceConnectionConnection
  coords: Coords!
  createdAt: AWSDateTime!
  currentPlayers(filter: ModelUprofileFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUprofileConnection
  events(beginningTime: ModelStringKeyConditionInput, filter: ModelEventFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelEventConnection
  id: ID!
  name: String!
  updatedAt: AWSDateTime!
}

type PrivateNote {
  content: String!
  createdAt: AWSDateTime!
  id: ID!
  owner: String
  updatedAt: AWSDateTime!
}

type Query @aws_api_key @aws_cognito_user_pools {
  getEvent(id: ID!): Event
  getEventChatMessage(id: ID!): EventChatMessage
  getNotification(id: ID!): Notification
  getPlace(id: ID!): Place
  getPrivateNote(id: ID!): PrivateNote
  getTask(id: ID!): Task
  getUprofile(id: ID!): Uprofile
  getUserDoc(id: ID!): UserDoc
  listEventChatMessages(filter: ModelEventChatMessageFilterInput, limit: Int, nextToken: String): ModelEventChatMessageConnection
  listEvents(filter: ModelEventFilterInput, limit: Int, nextToken: String): ModelEventConnection
  listNotifications(filter: ModelNotificationFilterInput, limit: Int, nextToken: String): ModelNotificationConnection
  listPlaces(filter: ModelPlaceFilterInput, limit: Int, nextToken: String): ModelPlaceConnection
  listPrivateNotes(filter: ModelPrivateNoteFilterInput, limit: Int, nextToken: String): ModelPrivateNoteConnection
  listTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String): ModelTaskConnection
  listUprofiles(filter: ModelUprofileFilterInput, limit: Int, nextToken: String): ModelUprofileConnection
  listUserDocs(filter: ModelUserDocFilterInput, limit: Int, nextToken: String): ModelUserDocConnection
}

type Subscription {
  onCreateEvent: Event @aws_subscribe(mutations : ["createEvent"])
  onCreateEventChatMessage: EventChatMessage @aws_subscribe(mutations : ["createEventChatMessage"])
  onCreateNotification(profileID: ID!): Notification @aws_subscribe(mutations : ["createNotification"])
  onCreatePlace: Place @aws_subscribe(mutations : ["createPlace"])
  onCreatePrivateNote(owner: String!): PrivateNote @aws_subscribe(mutations : ["createPrivateNote"])
  onCreateTask: Task @aws_subscribe(mutations : ["createTask"])
  onCreateUprofile: Uprofile @aws_subscribe(mutations : ["createUprofile"])
  onCreateUserConnection: UserConnection @aws_subscribe(mutations : ["createUserConnection"])
  onCreateUserDoc: UserDoc @aws_subscribe(mutations : ["createUserDoc"])
  onCreateUserEventConnection(profileID: ID!): UserEventConnection @aws_subscribe(mutations : ["createUserEventConnection"])
  onCreateUserPlaceConnection: UserPlaceConnection @aws_subscribe(mutations : ["createUserPlaceConnection"])
  onDeleteEvent: Event @aws_subscribe(mutations : ["deleteEvent"])
  onDeleteEventChatMessage: EventChatMessage @aws_subscribe(mutations : ["deleteEventChatMessage"])
  onDeleteNotification: Notification @aws_subscribe(mutations : ["deleteNotification"])
  onDeletePlace: Place @aws_subscribe(mutations : ["deletePlace"])
  onDeletePrivateNote(owner: String!): PrivateNote @aws_subscribe(mutations : ["deletePrivateNote"])
  onDeleteTask: Task @aws_subscribe(mutations : ["deleteTask"])
  onDeleteUprofile: Uprofile @aws_subscribe(mutations : ["deleteUprofile"])
  onDeleteUserConnection: UserConnection @aws_subscribe(mutations : ["deleteUserConnection"])
  onDeleteUserDoc: UserDoc @aws_subscribe(mutations : ["deleteUserDoc"])
  onDeleteUserEventConnection: UserEventConnection @aws_subscribe(mutations : ["deleteUserEventConnection"])
  onDeleteUserPlaceConnection: UserPlaceConnection @aws_subscribe(mutations : ["deleteUserPlaceConnection"])
  onUpdateEvent: Event @aws_subscribe(mutations : ["updateEvent"])
  onUpdateEventChatMessage: EventChatMessage @aws_subscribe(mutations : ["updateEventChatMessage"])
  onUpdateNotification: Notification @aws_subscribe(mutations : ["updateNotification"])
  onUpdatePlace: Place @aws_subscribe(mutations : ["updatePlace"])
  onUpdatePrivateNote(owner: String!): PrivateNote @aws_subscribe(mutations : ["updatePrivateNote"])
  onUpdateTask: Task @aws_subscribe(mutations : ["updateTask"])
  onUpdateUprofile(id: ID): Uprofile @aws_subscribe(mutations : ["updateUprofile"])
  onUpdateUserConnection: UserConnection @aws_subscribe(mutations : ["updateUserConnection"])
  onUpdateUserDoc: UserDoc @aws_subscribe(mutations : ["updateUserDoc"])
  onUpdateUserEventConnection: UserEventConnection @aws_subscribe(mutations : ["updateUserEventConnection"])
  onUpdateUserPlaceConnection: UserPlaceConnection @aws_subscribe(mutations : ["updateUserPlaceConnection"])
}

type Task {
  createdAt: AWSDateTime!
  description: String
  id: ID!
  status: String
  title: String!
  updatedAt: AWSDateTime!
}

type UpdateCurrentPlace {
  body: Uprofile
  statusCode: Int
}

type UpdateCurrentPlaceOutput {
  data: Uprofile
  statusCode: Int
}

type Uprofile @aws_cognito_user_pools @aws_iam {
  attendings(arrivingTime: ModelStringKeyConditionInput, filter: ModelUserPlaceConnectionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserPlaceConnectionConnection
  createdAt: AWSDateTime!
  currentPlace: Place
  currentPlaceID: ID
  eventsCreated(beginningTime: ModelStringKeyConditionInput, filter: ModelEventFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelEventConnection
  followers(filter: ModelUserConnectionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserConnectionConnection
  following(filter: ModelUserConnectionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserConnectionConnection
  id: ID!
  myEvents(filter: ModelUserEventConnectionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserEventConnectionConnection
  name: String
  notifications(createdAt: ModelStringKeyConditionInput, filter: ModelNotificationFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelNotificationConnection
  updatedAt: AWSDateTime!
  userDoc: UserDoc
  userDocId: ID!
  username: String!
}

type UserConnection @aws_cognito_user_pools @aws_iam {
  createdAt: AWSDateTime!
  followed: Uprofile
  followedID: ID!
  follower: Uprofile
  followerID: ID!
  id: ID!
  updatedAt: AWSDateTime!
}

type UserDoc @aws_cognito_user_pools @aws_iam {
  createdAt: AWSDateTime!
  deviceToken: String
  email: String!
  id: ID!
  phoneNumber: String
  profileID: ID
  uProfile: Uprofile
  updatedAt: AWSDateTime!
}

type UserEventConnection @aws_cognito_user_pools @aws_iam {
  Event: Event
  createdAt: AWSDateTime!
  eventID: ID!
  id: ID!
  profileID: ID!
  updatedAt: AWSDateTime!
  userProfile: Uprofile
}

type UserPlaceConnection @aws_cognito_user_pools @aws_iam {
  arrivingTime: AWSDateTime!
  createdAt: AWSDateTime!
  departureTime: AWSDateTime
  id: ID!
  place: Place
  placeID: ID!
  profileID: ID!
  uProfile: Uprofile
  updatedAt: AWSDateTime!
}

enum EventPrivacy {
  private
  public
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

enum NotifType {
  eventInvitation
  friendPlaying
  newFollower
}

input CoordsInput {
  lat: Float!
  long: Float!
}

input CreateEventChatMessageInput {
  body: String!
  createdAt: AWSDateTime
  eventID: ID!
  id: ID
  profileID: ID!
}

input CreateEventInput {
  beginningTime: AWSDateTime!
  creatorID: ID!
  description: String!
  endingTime: AWSDateTime!
  eventPictures: [AWSURL]
  eventVideos: [AWSURL]
  id: ID
  name: String!
  placeID: ID!
  privacy: EventPrivacy!
  profilePic: AWSURL
  tags: [String]
}

input CreateEventInput_c {
  beginningTime: AWSDateTime!
  creatorID: ID!
  description: String!
  endingTime: AWSDateTime!
  eventPictures: [AWSURL]
  eventVideos: [AWSURL]
  id: ID
  name: String!
  participants: [String]
  placeID: ID!
  privacy: EventPrivacy!
  profilePic: AWSURL
  tags: [String]
}

input CreateNotificationInput {
  body: String!
  createdAt: AWSDateTime
  id: ID
  photo: AWSURL
  profileID: ID!
  type: NotifType!
}

input CreatePlaceInput {
  address: String!
  coords: CoordsInput!
  id: ID
  name: String!
}

input CreatePrivateNoteInput {
  content: String!
  id: ID
}

input CreateTaskInput {
  description: String
  id: ID
  status: String
  title: String!
}

input CreateUprofileInput {
  currentPlaceID: ID
  id: ID
  name: String
  userDocId: ID!
  username: String!
}

input CreateUserConnectionInput {
  followedID: ID!
  followerID: ID!
  id: ID
}

input CreateUserDocInput {
  deviceToken: String
  email: String!
  id: ID
  phoneNumber: String
  profileID: ID
}

input CreateUserEventConnectionInput {
  eventID: ID!
  id: ID
  profileID: ID!
}

input CreateUserPlaceConnectionInput {
  arrivingTime: AWSDateTime!
  departureTime: AWSDateTime
  id: ID
  placeID: ID!
  profileID: ID!
}

input DeleteEventChatMessageInput {
  id: ID!
}

input DeleteEventInput {
  id: ID!
}

input DeleteNotificationInput {
  id: ID!
}

input DeletePlaceInput {
  id: ID!
}

input DeletePrivateNoteInput {
  id: ID!
}

input DeleteTaskInput {
  id: ID!
}

input DeleteUprofileInput {
  id: ID!
}

input DeleteUserConnectionInput {
  id: ID!
}

input DeleteUserDocInput {
  id: ID!
}

input DeleteUserEventConnectionInput {
  id: ID!
}

input DeleteUserPlaceConnectionInput {
  id: ID!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelEventChatMessageConditionInput {
  and: [ModelEventChatMessageConditionInput]
  body: ModelStringInput
  createdAt: ModelStringInput
  eventID: ModelIDInput
  not: ModelEventChatMessageConditionInput
  or: [ModelEventChatMessageConditionInput]
  profileID: ModelIDInput
}

input ModelEventChatMessageFilterInput {
  and: [ModelEventChatMessageFilterInput]
  body: ModelStringInput
  createdAt: ModelStringInput
  eventID: ModelIDInput
  id: ModelIDInput
  not: ModelEventChatMessageFilterInput
  or: [ModelEventChatMessageFilterInput]
  profileID: ModelIDInput
}

input ModelEventConditionInput {
  and: [ModelEventConditionInput]
  beginningTime: ModelStringInput
  creatorID: ModelIDInput
  description: ModelStringInput
  endingTime: ModelStringInput
  eventPictures: ModelStringInput
  eventVideos: ModelStringInput
  name: ModelStringInput
  not: ModelEventConditionInput
  or: [ModelEventConditionInput]
  participants: ModelStringInput
  placeID: ModelIDInput
  privacy: ModelEventPrivacyInput
  profilePic: ModelStringInput
  tags: ModelStringInput
}

input ModelEventFilterInput {
  and: [ModelEventFilterInput]
  beginningTime: ModelStringInput
  creatorID: ModelIDInput
  description: ModelStringInput
  endingTime: ModelStringInput
  eventPictures: ModelStringInput
  eventVideos: ModelStringInput
  id: ModelIDInput
  name: ModelStringInput
  not: ModelEventFilterInput
  or: [ModelEventFilterInput]
  placeID: ModelIDInput
  privacy: ModelEventPrivacyInput
  profilePic: ModelStringInput
  tags: ModelStringInput
}

input ModelEventPrivacyInput {
  eq: EventPrivacy
  ne: EventPrivacy
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelNotifTypeInput {
  eq: NotifType
  ne: NotifType
}

input ModelNotificationConditionInput {
  and: [ModelNotificationConditionInput]
  body: ModelStringInput
  createdAt: ModelStringInput
  not: ModelNotificationConditionInput
  or: [ModelNotificationConditionInput]
  photo: ModelStringInput
  profileID: ModelIDInput
  type: ModelNotifTypeInput
}

input ModelNotificationFilterInput {
  and: [ModelNotificationFilterInput]
  body: ModelStringInput
  createdAt: ModelStringInput
  id: ModelIDInput
  not: ModelNotificationFilterInput
  or: [ModelNotificationFilterInput]
  photo: ModelStringInput
  profileID: ModelIDInput
  type: ModelNotifTypeInput
}

input ModelPlaceConditionInput {
  address: ModelStringInput
  and: [ModelPlaceConditionInput]
  name: ModelStringInput
  not: ModelPlaceConditionInput
  or: [ModelPlaceConditionInput]
}

input ModelPlaceFilterInput {
  address: ModelStringInput
  and: [ModelPlaceFilterInput]
  id: ModelIDInput
  name: ModelStringInput
  not: ModelPlaceFilterInput
  or: [ModelPlaceFilterInput]
}

input ModelPrivateNoteConditionInput {
  and: [ModelPrivateNoteConditionInput]
  content: ModelStringInput
  not: ModelPrivateNoteConditionInput
  or: [ModelPrivateNoteConditionInput]
}

input ModelPrivateNoteFilterInput {
  and: [ModelPrivateNoteFilterInput]
  content: ModelStringInput
  id: ModelIDInput
  not: ModelPrivateNoteFilterInput
  or: [ModelPrivateNoteFilterInput]
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelStringKeyConditionInput {
  beginsWith: String
  between: [String]
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
}

input ModelTaskConditionInput {
  and: [ModelTaskConditionInput]
  description: ModelStringInput
  not: ModelTaskConditionInput
  or: [ModelTaskConditionInput]
  status: ModelStringInput
  title: ModelStringInput
}

input ModelTaskFilterInput {
  and: [ModelTaskFilterInput]
  description: ModelStringInput
  id: ModelIDInput
  not: ModelTaskFilterInput
  or: [ModelTaskFilterInput]
  status: ModelStringInput
  title: ModelStringInput
}

input ModelUprofileConditionInput {
  and: [ModelUprofileConditionInput]
  currentPlaceID: ModelIDInput
  name: ModelStringInput
  not: ModelUprofileConditionInput
  or: [ModelUprofileConditionInput]
  userDocId: ModelIDInput
  username: ModelStringInput
}

input ModelUprofileFilterInput {
  and: [ModelUprofileFilterInput]
  currentPlaceID: ModelIDInput
  id: ModelIDInput
  name: ModelStringInput
  not: ModelUprofileFilterInput
  or: [ModelUprofileFilterInput]
  userDocId: ModelIDInput
  username: ModelStringInput
}

input ModelUserConnectionConditionInput {
  and: [ModelUserConnectionConditionInput]
  followedID: ModelIDInput
  followerID: ModelIDInput
  not: ModelUserConnectionConditionInput
  or: [ModelUserConnectionConditionInput]
}

input ModelUserConnectionFilterInput {
  and: [ModelUserConnectionFilterInput]
  followedID: ModelIDInput
  followerID: ModelIDInput
  id: ModelIDInput
  not: ModelUserConnectionFilterInput
  or: [ModelUserConnectionFilterInput]
}

input ModelUserDocConditionInput {
  and: [ModelUserDocConditionInput]
  deviceToken: ModelStringInput
  email: ModelStringInput
  not: ModelUserDocConditionInput
  or: [ModelUserDocConditionInput]
  phoneNumber: ModelStringInput
  profileID: ModelIDInput
}

input ModelUserDocFilterInput {
  and: [ModelUserDocFilterInput]
  deviceToken: ModelStringInput
  email: ModelStringInput
  id: ModelIDInput
  not: ModelUserDocFilterInput
  or: [ModelUserDocFilterInput]
  phoneNumber: ModelStringInput
  profileID: ModelIDInput
}

input ModelUserEventConnectionConditionInput {
  and: [ModelUserEventConnectionConditionInput]
  eventID: ModelIDInput
  not: ModelUserEventConnectionConditionInput
  or: [ModelUserEventConnectionConditionInput]
  profileID: ModelIDInput
}

input ModelUserEventConnectionFilterInput {
  and: [ModelUserEventConnectionFilterInput]
  eventID: ModelIDInput
  id: ModelIDInput
  not: ModelUserEventConnectionFilterInput
  or: [ModelUserEventConnectionFilterInput]
  profileID: ModelIDInput
}

input ModelUserPlaceConnectionConditionInput {
  and: [ModelUserPlaceConnectionConditionInput]
  arrivingTime: ModelStringInput
  departureTime: ModelStringInput
  not: ModelUserPlaceConnectionConditionInput
  or: [ModelUserPlaceConnectionConditionInput]
  placeID: ModelIDInput
  profileID: ModelIDInput
}

input ModelUserPlaceConnectionFilterInput {
  and: [ModelUserPlaceConnectionFilterInput]
  arrivingTime: ModelStringInput
  departureTime: ModelStringInput
  id: ModelIDInput
  not: ModelUserPlaceConnectionFilterInput
  or: [ModelUserPlaceConnectionFilterInput]
  placeID: ModelIDInput
  profileID: ModelIDInput
}

input UpdateEventChatMessageInput {
  body: String
  createdAt: AWSDateTime
  eventID: ID
  id: ID!
  profileID: ID
}

input UpdateEventInput {
  beginningTime: AWSDateTime
  creatorID: ID
  description: String
  endingTime: AWSDateTime
  eventPictures: [AWSURL]
  eventVideos: [AWSURL]
  id: ID!
  name: String
  placeID: ID
  privacy: EventPrivacy
  profilePic: AWSURL
  tags: [String]
}

input UpdateNotificationInput {
  body: String
  createdAt: AWSDateTime
  id: ID!
  photo: AWSURL
  profileID: ID
  type: NotifType
}

input UpdatePlaceInput {
  address: String
  coords: CoordsInput
  id: ID!
  name: String
}

input UpdatePrivateNoteInput {
  content: String
  id: ID!
}

input UpdateTaskInput {
  description: String
  id: ID!
  status: String
  title: String
}

input UpdateUprofileInput {
  currentPlaceID: ID
  id: ID!
  name: String
  userDocId: ID
  username: String
}

input UpdateUserConnectionInput {
  followedID: ID
  followerID: ID
  id: ID!
}

input UpdateUserDocInput {
  deviceToken: String
  email: String
  id: ID!
  phoneNumber: String
  profileID: ID
}

input UpdateUserEventConnectionInput {
  eventID: ID
  id: ID!
  profileID: ID
}

input UpdateUserPlaceConnectionInput {
  arrivingTime: AWSDateTime
  departureTime: AWSDateTime
  id: ID!
  placeID: ID
  profileID: ID
}
