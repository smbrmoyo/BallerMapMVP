type UserDoc @model {
  id: ID!
  profileID: ID
  email: String!
  deviceToken: String
  phoneNumber: String
  uProfile: Uprofile @connection(fields: ["profileID"])
}

type Uprofile
  @model
  @key(name: "byUser", fields: ["username"])
  @key(name: "byPlace", fields: ["currentPlaceID"]) {
  id: ID!
  username: String!
  name: String
  userDocId: ID!
  currentPlaceID: ID
  cityCountry: String
  profilePicture: String
  notifications: [Notification] @connection(keyName: "byUser", fields: ["id"])
  myEvents: [UserEventConnection] @connection(keyName: "byUser", fields: ["id"])
  eventsCreated: [Event] @connection(keyName: "byCreator", fields: ["id"])
  followers: [UserConnection] @connection(keyName: "followers", fields: ["id"])
  following: [UserConnection] @connection(keyName: "following", fields: ["id"])
  currentPlace: Place @connection(fields: ["currentPlaceID"])
  userDoc: UserDoc @connection(fields: ["userDocId"])
  attendings: [UserPlaceConnection]
    @connection(keyName: "byUser", fields: ["id"])
}

type UserConnection
  @model(queries: null)
  @key(name: "following", fields: ["followerID"])
  @key(name: "followers", fields: ["followedID"]) {
  id: ID!
  followerID: ID!
  followedID: ID!
  follower: Uprofile @connection(fields: ["followerID"])
  followed: Uprofile @connection(fields: ["followedID"])
}

type UserPlaceConnection
  @model(queries: null)
  @key(name: "byPlace", fields: ["placeID", "arrivingTime"])
  @key(name: "byUser", fields: ["profileID", "arrivingTime"]) {
  id: ID!
  profileID: ID!
  placeID: ID!
  arrivingTime: AWSDateTime!
  departureTime: AWSDateTime
  uProfile: Uprofile @connection(fields: ["profileID"])
  place: Place @connection(fields: ["placeID"])
}

type UserEventConnection
  @model(queries: null)
  @key(name: "byUser", fields: ["profileID"])
  @key(name: "byEvent", fields: ["eventID"]) {
  id: ID!
  eventID: ID!
  profileID: ID!
  Event: Event! @connection(fields: ["eventID"])
  userProfile: Uprofile @connection(fields: ["profileID"])
}

type Event
  @model
  @key(name: "byPlace", fields: ["placeID", "beginningTime"])
  @key(name: "byCreator", fields: ["creatorID", "beginningTime"]) {
  id: ID!
  name: String!
  placeID: ID!
  creatorID: ID!
  beginningTime: AWSDateTime!
  endingTime: AWSDateTime!
  tags: [String]
  place: Place @connection(fields: ["placeID"])
  creator: Uprofile! @connection(fields: ["creatorID"])
  participantsIDs: [ID]
  newParticipantsIDs: [ID]
  participants: [UserEventConnection]
    @connection(keyName: "byEvent", fields: ["id"])
  chat: [EventChatMessage] @connection(keyName: "byEvent", fields: ["id"])
  description: String!
  privacy: EventPrivacy!
  status: EventStatus!
  profilePic: AWSURL
  eventPictures: [AWSURL]
  eventVideos: [AWSURL]
}

enum EventPrivacy {
  private
  public
}

enum EventStatus {
  upcoming
  live
  passed
}

type EventChatMessage
  @model
  @key(name: "byEvent", fields: ["eventID", "createdAt"]) {
  id: ID!
  body: String!
  profileID: ID!
  eventID: ID!
  createdAt: AWSDateTime
  event: Event @connection(fields: ["eventID"])
  userProfile: Uprofile @connection(fields: ["profileID"])
}

type Place @model {
  id: ID!
  name: String!
  address: String!
  coords: Coords!
  events: [Event] @connection(keyName: "byPlace", fields: ["id"])
  currentPlayers: [Uprofile] @connection(keyName: "byPlace", fields: ["id"])
  attendings: [UserPlaceConnection]
    @connection(keyName: "byPlace", fields: ["id"])
}

type Notification
  @model
  @key(name: "byUser", fields: ["profileID", "createdAt"]) {
  id: ID!
  body: String!
  profileID: ID!
  photo: AWSURL
  createdAt: AWSDateTime
  type: NotifType!
  uProfile: Uprofile @connection(fields: ["profileID"])
}

type Coords {
  long: Float!
  lat: Float!
}

enum NotifType {
  newFollower
  eventInvitation
  friendPlaying
}

type Query {
  uProfiles: [Uprofile] @function(name: "ListResolver")
  eventProfiles: [Event] @function(name: "listResolver")
}
